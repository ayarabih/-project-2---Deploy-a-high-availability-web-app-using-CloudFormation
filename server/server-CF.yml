Description: |
  "create by aya rabih mostafa in 16 sebtamber 2022" "Servers creation"
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
Resources:
  LBSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId: !ImportValue 
        'Fn::Sub': '${EnvironmentName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId: !ImportValue 
        'Fn::Sub': '${EnvironmentName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: "ami-0729e439b6769d6ab" 
      UserData: !Base64 
        'Fn::Sub': |-
          #!/bin/bash
          [ `whoami` = root ] || { sudo "$0" "$@"; exit $?; }
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "it works! Udagram, Udacity" > index.html
      SecurityGroups:
        - !Ref WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
        - DeviceName: /dev/sdk
          Ebs:
            VolumeSize: '10'
  WebAppGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !ImportValue 
          'Fn::Sub': '${EnvironmentName}-PRIV-NETS'
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
        - !Ref WebAppTargetGroup
  WebAppLB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !ImportValue 
          'Fn::Sub': '${EnvironmentName}-PUB1-SN'
        - !ImportValue 
          'Fn::Sub': '${EnvironmentName}-PUB2-SN'
      SecurityGroups:
        - !Ref LBSecGroup
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref Listener
      Priority: 1
  WebAppTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      TargetGroupAttributes:
        - Key: slow_start.duration_seconds
          Value: 300
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !ImportValue 
        'Fn::Sub': '${EnvironmentName}-VPCID'
Outputs:
  LoadBalancerDNS:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebAppLB
          - DNSName
    Export:
      Name: LoadBalancerURL
